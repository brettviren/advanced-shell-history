#+TITLE: Advanced Shell History

Save your command line history in a sqlite3 DB!

* Caveat

This fork is not maintained.  Please see 
https://github.com/barabo/advanced-shell-history

* Features

- Retains extra command details:
   - exit code
   - start and stop times (and command duration)
   - current working directory of the command
   - session details such as tty, pid, ppid, ssh connection details
- works with multiple shells (zsh and bash)
- saves history into an Sqlite3 database
- provides a convenient tool to query the history database.

* Installation and Setup

System-wide installation (default prefix is =/usr/local=):

#+BEGIN_EXAMPLE
  $ ./waf --prefix=/path/to/install configure build
  $ sudo ./waf install
  $ source /path/to/install/etc/advanced-shell-history/bash
#+END_EXAMPLE

Personal installation: 

#+BEGIN_EXAMPLE
  $ ./waf --user --prefix=$HOME configure build install
  $ source $HOME/.ash/bash
#+END_EXAMPLE

* Queries 

The history can be queried with =ash-query= using predefined and named SQL queries defined in =~/.ash/queries=.

#+BEGIN_EXAMPLE
  # lists the available queries
  $ ash_query -Q  

  # execute the query named 'CWD' to view history in the current working directory.
  $ ash_query -q CWD  
#+END_EXAMPLE

There are predefined and named formats that can be selected to print the results.

#+BEGIN_EXAMPLE
  # list the supported display formats.
  $ ash_query -F

  # display the CWD history in CSV format.
  $ ash_query -q CWD -f csv
#+END_EXAMPLE

The entries in =~/.ash/queries= may include environment variables.

More information is in the [[./doc]] directory in the original Google Code wiki files.

* Caveats

- this is not meant to be a security auditing tool - it's for user
  convenience and meant to enhance shell builtin history.
- for bash users, this overrides your =PROMPT_COMMAND= and changes the
  default options of your builtin history.  Hopefully both are an
  improvement.
- for zsh users, this overrides your =precmd= function.  The shell
  script attempts to rename your previous =precmd= function and continue
  to hook into it.
- all users will notice that the =PIPESTATUS= / =pipestatus= variables
  have been renamed to =ASH_PIPESTATUS=.  Because these variables are
  transient and logged, they cannot be easily restored.  Instead they
  are copied.
- this potentially changes your normal shell history settings to
  enable options necessary for the magic to work.

* Bugs

- doesn't capture =exec='ed commands: example: =exec rm /tmp/foo= is lost
- the Python version is about 10x slower than the C++ version (and not installed)

* Meta

- Original author: cpa@google.com (Carl Anderson)
- Last Update: 2012-08-06 (by cpa)
- Refresh: brett.viren@gmail.com
- Original author returns: https://github.com/barabo/advanced-shell-history
