#+TITLE: Advanced Shell History

Save your command line history in a sqlite3 DB!

* Features

- Retains extra command details:
   - exit code
   - start and stop times (and command duration)
   - current working directory of the command
   - session details such as tty, pid, ppid, ssh connection details
- works with multiple shells (zsh and bash)
- saves history into a sqlite3 database
- provides a convenient tool to query the history database.

* Installation

#+BEGIN_EXAMPLE
  $ ./waf --prefix=/paht/to/install configure build install
#+END_EXAMPLE

* How Does This Work

This program operates on the assumption that your shell gives you the ability
to execute a custom operation before a prompt is redrawn on your terminal.

Bash provides the =PROMPT_COMMAND= environment variable while Zsh gives us the
=precmd= environment function.  Both are repurposed by this program to log the
previous command into a local database before each new prompt is displayed.

Many people have never heard of this feature or found a great use for it.
However, if you currently DO use this feature, you can still use this program.
The code renames your existing hook and invokes it after saving the previous
command.

* Caveats

- this is not meant to be a security auditing tool - it's for user
  convenience and meant to enhance shell builtin history.
- for bash users, this overrides your =PROMPT_COMMAND= and changes the
  default options of your builtin history.  Hopefully both are an
  improvement.
- for zsh users, this overrides your =precmd= function.  The shell
  script attempts to rename your previous =precmd= function and continue
  to hook into it.
- all users will notice that the =PIPESTATUS= / =pipestatus= variables
  have been renamed to =ASH_PIPESTATUS=.  Because these variables are
  transient and logged, they cannot be easily restored.  Instead they
  are copied.
- this potentially changes your normal shell history settings to
  enable options necessary for the magic to work.

* Bugs
- doesn't capture =exec='ed commands: example: =exec rm /tmp/foo= is lost
- the Python version is about 10x slower than the C++ version (and not installed)

Author: cpa@google.com (Carl Anderson)
Last Update: 2012-08-06 (by cpa)
Refresh: brett.viren@gmail.com
